	abstract class ContextInformation
	{
		attribute context : String[?];
		attribute history : Boolean[1];
		attribute privacy : PrivacyKinds[?];
		attribute environment : EnvironmentKinds[*|1] { ordered };
		invariant Specification: self.context->notEmpty();
	}
	class RequiredContextInformation extends ContextInformation
	{
		operation WhatThreat() : ThreatSituation[*]
		{
			body: self.contextthreatalgo.threatsituation->asSet() ;
		}
		operation WhatRisk() : Risk[*]
		{
			body: self.contextthreatalgo.threatsituation.threatriskalgo.risk->asSet() ;
		}
		property availablecontextinformation#requiredcontextinformation : AvailableContextInformation[?];
		property contextthreatalgo#requiredcontextinformation : ContextThreatAlgo[*|1] { ordered };
		invariant Specification: self.context->notEmpty();
		invariant HistoryCheck: self.contextthreatalgo->forAll(a|a.history=self.history);
		invariant
		PrivacyCheck: self.contextthreatalgo.threatsituation.threatriskalgo.risk.authenticationmechanism->forAll(a|a.privacy=self.privacy);
		invariant
		EnvironmentCheck: self.contextthreatalgo.threatsituation.threatriskalgo.risk.authenticationmechanism ->includesAll(self.environment);
			

	}
	class ThreatSituation
	{
		operation WhatContextInformation() : RequiredContextInformation[*]
		{
			body: self.contextthreatalgo.requiredcontextinformation->asSet() ;
		}
		operation WhatRisk() : Risk[*]
		{
			body: self.threatriskalgo.risk->asSet() ;
		}
		property contextthreatalgo#threatsituation : ContextThreatAlgo[*|1] { ordered };
		property threatriskalgo#threatsituation : ThreatRiskAlgo[*|1] { ordered };
		attribute threat : String[?];
		invariant Specification: self.threat->notEmpty();
	}
	class Risk
	{
		operation WhatAuthentication() : AuthenticationMechanism[*]
		{
			body: self.authenticationmechanism->asSet() ;
		}
		property threatriskalgo#risk : ThreatRiskAlgo[*|1] { ordered };
		attribute fearedEvent : String[?];
		attribute factor : FactorKinds[*|1] { ordered };
		property authenticationmechanism#risk : AuthenticationMechanism[*|1] { ordered };
		invariant FactorCheck: self.authenticationmechanism->forAll(a|a.factor<>self.factor);
		invariant Specification: self.fearedEvent->notEmpty();
	}
	class AuthenticationMechanism
	{
		operation WhatRisk() : Risk[*]
		{
			body: self.risk->asSet() ;
		}
		attribute mechanism : String[?];
		attribute usability : UsabilityKinds[*|1] { ordered };
		attribute deployability : DeployabilityKinds[*|1] { ordered };
		attribute factor : FactorKinds[*|1] { ordered };
		attribute efficiencyToUse : EnvironmentKinds[*|1] { ordered };
		attribute privacy : PrivacyKinds[?];
		property risk#authenticationmechanism : Risk[*|1] { ordered };
		invariant UsabilityCheck: AuthenticationMechanism.allInstances()->select(a|a.factor=0)->asSet().usability<>0;
		invariant UsabilityCheck2: AuthenticationMechanism.allInstances()->select(a|a.factor=1)->asSet().usability<>1;
		invariant Specification: self.mechanism->notEmpty();
		invariant UsabilityOptimization: self.UsabilityKinds->size() >= AuthenticationMechanism.allInstances()->select(oclIsNew()).UsabilityKinds->size();
		invariant DeployabilityOptimization: self.DeployabilityKinds->size() >= AuthenticationMechanism.allInstances()->select(oclIsNew()).DeployabilityKinds->size();
		invariant PrivacyOptimization: self.PrivacyKinds->size() >= AuthenticationMechanism.allInstances()->select(oclIsNew()).PrivacyKinds->size();
		invariant SecurityOptimization: self.SecurityKinds->size() >= AuthenticationMechanism.allInstances()->select(oclIsNew()).SecurityKinds->size();
	}
	class AvailableContextInformation extends ContextInformation
	{
		operation WhatThreatSituation() : ThreatSituation[*]
		{
			body: self.requiredcontextinformation.contextthreatalgo.threatsituation->asSet() ;
		}
		operation WhatRequiredInfo() : RequiredContextInformation[*]
		{
			body: self.requiredcontextinformation->asSet() ;
		}
		property requiredcontextinformation#availablecontextinformation : RequiredContextInformation[?];
	}
	class ContextThreatAlgo
	{
		property threatsituation#contextthreatalgo : ThreatSituation[*|1] { ordered };
		attribute algo : String[?];
		attribute history : Boolean[1];
		property requiredcontextinformation#contextthreatalgo : RequiredContextInformation[*|1] { ordered };
		invariant Specification: self.algo->notEmpty();
		invariant privacySensitivity: let lowestPrivacyLevel = self.requiredContextInformation->sortedBy(ci | ci.privacyLevel)->first() -> lowestPrivacyLevel.privacyLevel < self.privacyLevel;
	}
	class ThreatRiskAlgo
	{
		property threatsituation#threatriskalgo : ThreatSituation[*|1] { ordered };
		property risk#threatriskalgo : Risk[*|1] { ordered };
		attribute algo : String[?];
		invariant Specification: self.algo->notEmpty();
	}
	enum EnvironmentKinds { serializable }
	{
		literal noise;
		literal darkness = 1;
		literal activity = 2;
		literal sourrounded = 3;
	}
	enum PrivacyKinds { serializable }
	{
		literal low;
		literal medium = 1;
		literal high = 2;
	}
	enum FactorKinds { serializable }
	{
		literal knowledge;
		literal possession = 1;
		literal being = 2;
		literal doing = 3;
		literal human = 4;
		literal personal = 5;
		literal location = 6;
	}
	enum UsabilityKinds { serializable }
	{
		literal MemorywiseEffortless;
		literal NothingToCarry = 1;
		literal NoAdditionalNetworkAccess = 2;
		literal FrictionlessSetup = 3;
		literal AffinityToUser = 4;
		literal EaseToUse = 5;
		literal EaseToLearn = 6;
		literal EaseToRecover = 7;
		literal Reliability = 8;
		literal UserChoice = 9;
		literal ScalableForUsers = 10;
		literal PhysicallyEffortless = 11;
		literal InfrequentErrors = 12;
		literal NotToComplex = 13;
		literal EfficientToUse = 14;
	}
	enum DeployabilityKinds { serializable }
	{
		literal Accessible;
		literal NegligibleCostsPerUser = 1;
		literal ServerCompatible = 2;
		literal BrowserCompatible = 3;
		literal Mature = 4;
		literal NonProprietary = 5;
		literal ImplementationCosts = 6;
	}
	class ModellingFramework
	{
		property contextinformation : ContextInformation[*|1] { ordered composes };
		property contextthreatalgo : ContextThreatAlgo[*|1] { ordered composes };
		property threatsituation : ThreatSituation[*|1] { ordered composes };
		property threatriskalgo : ThreatRiskAlgo[*|1] { ordered composes };
		property authenticationmechanism : AuthenticationMechanism[*|1] { ordered composes };
		property risk : Risk[*|1] { ordered composes };
		property requiredcontextinformation : RequiredContextInformation[*|1] { ordered composes };
		property availablecontextinformation : AvailableContextInformation[*|1] { ordered composes };
	}
}
